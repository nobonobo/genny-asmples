// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package numeric

func SumInt(values ...int) int {
	res := values[0]
	for _, v := range values[1:] {
		res += v
	}
	return res
}

func MaxInt(values ...int) int {
	res := values[0]
	for _, v := range values[1:] {
		if res < v {
			res = v
		}
	}
	return res
}

func MinInt(values ...int) int {
	res := values[0]
	for _, v := range values[1:] {
		if res > v {
			res = v
		}
	}
	return res
}

func SumInt16(values ...int16) int16 {
	res := values[0]
	for _, v := range values[1:] {
		res += v
	}
	return res
}

func MaxInt16(values ...int16) int16 {
	res := values[0]
	for _, v := range values[1:] {
		if res < v {
			res = v
		}
	}
	return res
}

func MinInt16(values ...int16) int16 {
	res := values[0]
	for _, v := range values[1:] {
		if res > v {
			res = v
		}
	}
	return res
}

func SumInt32(values ...int32) int32 {
	res := values[0]
	for _, v := range values[1:] {
		res += v
	}
	return res
}

func MaxInt32(values ...int32) int32 {
	res := values[0]
	for _, v := range values[1:] {
		if res < v {
			res = v
		}
	}
	return res
}

func MinInt32(values ...int32) int32 {
	res := values[0]
	for _, v := range values[1:] {
		if res > v {
			res = v
		}
	}
	return res
}

func SumInt64(values ...int64) int64 {
	res := values[0]
	for _, v := range values[1:] {
		res += v
	}
	return res
}

func MaxInt64(values ...int64) int64 {
	res := values[0]
	for _, v := range values[1:] {
		if res < v {
			res = v
		}
	}
	return res
}

func MinInt64(values ...int64) int64 {
	res := values[0]
	for _, v := range values[1:] {
		if res > v {
			res = v
		}
	}
	return res
}
